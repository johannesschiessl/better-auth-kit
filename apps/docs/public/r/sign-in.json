{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sign-in",
  "type": "registry:component",
  "title": "Sign In",
  "description": "A sign in component for Better Auth.",
  "dependencies": [
    "better-auth",
    "zod"
  ],
  "registryDependencies": [
    "form",
    "input",
    "button"
  ],
  "files": [
    {
      "path": "registry/new-york/sign-in/sign-in.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Form } from \"@/components/ui/form\";\nimport { useCallback, useState } from \"react\";\nimport { useForm, type UseFormReturn } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { authClient } from \"@/lib/auth-client\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { PasswordField } from \"@/components/password-field\";\nimport { EmailField } from \"@/components/email-field\";\nimport { RootError } from \"@/components/root-error\";\nimport type { ErrorContext, SuccessContext } from \"better-auth/react\";\nimport { cn } from \"@/lib/utils\";\nimport { toast } from \"sonner\";\nimport { LoaderCircle } from \"lucide-react\";\n\nconst formSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6, {\n    message: \"Password must be at least 6 characters\",\n  }),\n});\n\nexport type FormSchema = z.infer<typeof formSchema>;\n\nexport interface SignInProps {\n  onSuccess?: (context: SuccessContext) => void;\n  onError?: (context: ErrorContext) => void;\n  callbackURL?: string;\n  className?: string;\n}\n\nexport function SignIn(props?: SignInProps) {\n  const form = useForm({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n  const [isLoading, setIsLoading] = useState(false);\n\n  const onSubmit = useCallback(\n    (values: FormSchema) => {\n      setIsLoading(true);\n      authClient.signIn.email(\n        {\n          ...values,\n          callbackURL: props?.callbackURL,\n        },\n        {\n          onSuccess(context) {\n            setIsLoading(false);\n            toast.success(`Welcome back ${context.data.user.name}!`);\n            return props?.onSuccess?.(context);\n          },\n          onError(context) {\n            setIsLoading(false);\n            toast.error(`There was an issue signing you in.`, {\n              description: <>{context.error.message}</>,\n            });\n            form.setError(\"root\", { message: context.error.message });\n            return props?.onError?.(context);\n          },\n        }\n      );\n    },\n    [props, form.setError]\n  );\n\n  return (\n    <div\n      className={cn(\n        \"space-y-8 w-96 border border-border rounded-2xl p-8 shadow-2xl bg-card text-card-foreground\",\n        props?.className\n      )}\n    >\n      <Form {...form}>\n        <Title />\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n          <EmailField form={form} isLoading={isLoading} />\n          <PasswordField form={form} isLoading={isLoading} />\n          <RootError form={form} />\n          <SubmitButton isLoading={isLoading} />\n        </form>\n        <DontHaveAccount />\n      </Form>\n    </div>\n  );\n}\n\nfunction Title() {\n  return (\n    <div className=\"w-full flex flex-col gap-2 justify-center items-center\">\n      <h1 className=\"text-lg font-bold\">Sign in to your account</h1>\n      <p className=\"text-muted-foreground text-xs\">\n        Welcome back! Please sign in to continue.\n      </p>\n    </div>\n  );\n}\n\nfunction DontHaveAccount() {\n  return (\n    <div className=\"w-full flex justify-center items-center gap-2 text-sm mt-5\">\n      <p className=\"text-muted-foreground\">Don't have an account?</p>\n      <a href=\"/sign-up\">Sign up</a>\n    </div>\n  );\n}\n\nfunction SubmitButton({ isLoading }: { isLoading: boolean }) {\n  return (\n    <Button\n      type=\"submit\"\n      className=\"w-full cursor-pointer\"\n      disabled={isLoading}\n    >\n      {isLoading ? <LoaderCircle className=\"animate-spin\" /> : \"Continue\"}\n    </Button>\n  );\n}\n",
      "type": "registry:block"
    },
    {
      "path": "registry/new-york/password-field/password-field.tsx",
      "content": "import {\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport type { UseFormReturn } from \"react-hook-form\";\n\nexport function PasswordField({ form, isLoading }: { form: UseFormReturn<any>, isLoading: boolean }) {\n  return (\n    <FormField\n      control={form.control}\n      name=\"password\"\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel>Password</FormLabel>\n          <FormControl>\n            <Input\n              type=\"password\"\n              placeholder=\"Enter your password\"\n              disabled={isLoading}\n              {...field}\n            />\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/email-field/email-field.tsx",
      "content": "import {\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport type { UseFormReturn } from \"react-hook-form\";\n\nexport function EmailField({\n  form,\n  isLoading,\n}: {\n  form: UseFormReturn<any>;\n  isLoading: boolean;\n}) {\n  return (\n    <FormField\n      control={form.control}\n      name=\"email\"\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel>Email</FormLabel>\n          <FormControl>\n            <Input\n              type=\"email\"\n              placeholder=\"Enter your email address\"\n              disabled={isLoading}\n              {...field}\n            />\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/root-error/root-error.tsx",
      "content": "import type { UseFormReturn } from \"react-hook-form\";\n\nexport function RootError({ form }: { form: UseFormReturn<any> }) {\n  if (!form.formState.errors.root) return null;\n  return (\n    <p className=\"text-destructive-foreground text-sm mb-3\">\n      {form.formState.errors.root.message}\n    </p>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}