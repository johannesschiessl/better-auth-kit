{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sign-up",
  "type": "registry:component",
  "title": "Sign Up",
  "description": "A sign up component for Better Auth.",
  "dependencies": [
    "better-auth",
    "zod"
  ],
  "registryDependencies": [
    "form",
    "input",
    "button"
  ],
  "files": [
    {
      "path": "registry/new-york/sign-up/sign-up.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Form } from \"@/components/ui/form\";\nimport { useCallback, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { authClient } from \"@/lib/auth-client\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { NameField } from \"@/components/name-field\";\nimport { PasswordField } from \"@/components/password-field\";\nimport { EmailField } from \"@/components/email-field\";\nimport { RootError } from \"@/components/root-error\";\nimport type { ErrorContext, SuccessContext } from \"better-auth/react\";\nimport { cn } from \"@/lib/utils\";\nimport { toast } from \"sonner\";\nimport { LoaderCircle } from \"lucide-react\";\n\nconst formSchema = z.object({\n\tname: z.string().min(2, {\n\t\tmessage: \"Name must be at least 2 characters\",\n\t}),\n\temail: z.string().email(),\n\tpassword: z.string().min(6, {\n\t\tmessage: \"Password must be at least 6 characters\",\n\t}),\n});\n\nexport type FormSchema = z.infer<typeof formSchema>;\n\nexport interface SignUpProps {\n\tonSuccess?: (context: SuccessContext) => void;\n\tonError?: (context: ErrorContext) => void;\n\tcallbackURL?: string;\n\tclassName?: string;\n}\n\nexport function SignUp(props?: SignUpProps) {\n\tconst form = useForm({\n\t\tresolver: zodResolver(formSchema),\n\t\tdefaultValues: {\n\t\t\temail: \"\",\n\t\t\tname: \"\",\n\t\t\tpassword: \"\",\n\t\t},\n\t});\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\tconst onSubmit = useCallback(\n\t\t(values: FormSchema) => {\n\t\t\tsetIsLoading(true);\n\t\t\tauthClient.signUp.email(\n\t\t\t\t{\n\t\t\t\t\t...values,\n\t\t\t\t\tcallbackURL: props?.callbackURL,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tonSuccess(context) {\n\t\t\t\t\t\tsetIsLoading(false);\n\t\t\t\t\t\ttoast.success(`Welcome ${context.data.user.name}!`);\n\t\t\t\t\t\treturn props?.onSuccess?.(context);\n\t\t\t\t\t},\n\t\t\t\t\tonError(context) {\n\t\t\t\t\t\tsetIsLoading(false);\n\t\t\t\t\t\ttoast.error(`There was an issue signing you up.`, {\n\t\t\t\t\t\t\tdescription: <>{context.error.message}</>,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tform.setError(\"root\", { message: context.error.message });\n\t\t\t\t\t\treturn props?.onError?.(context);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t},\n\t\t[props, form.setError],\n\t);\n\n\treturn (\n\t\t<div\n\t\t\tclassName={cn(\n\t\t\t\t\"space-y-8 w-96 border border-border rounded-2xl p-8 shadow-2xl bg-card text-card-foreground\",\n\t\t\t\tprops?.className,\n\t\t\t)}\n\t\t>\n\t\t\t<Form {...form}>\n\t\t\t\t<Title />\n\t\t\t\t<form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n\t\t\t\t\t<NameField form={form} isLoading={isLoading} />\n\t\t\t\t\t<EmailField form={form} isLoading={isLoading} />\n\t\t\t\t\t<PasswordField form={form} isLoading={isLoading} />\n\t\t\t\t\t<RootError form={form} />\n\t\t\t\t\t<SubmitButton isLoading={isLoading} />\n\t\t\t\t</form>\n\t\t\t\t<AlreadyHaveAccount />\n\t\t\t</Form>\n\t\t</div>\n\t);\n}\n\nfunction Title() {\n\treturn (\n\t\t<div className=\"w-full flex flex-col gap-2 justify-center items-center\">\n\t\t\t<h1 className=\"text-lg font-bold\">Create your account</h1>\n\t\t\t<p className=\"text-muted-foreground text-xs\">\n\t\t\t\tWelcome! Please fill in your details to get started.\n\t\t\t</p>\n\t\t</div>\n\t);\n}\n\nfunction AlreadyHaveAccount() {\n\treturn (\n\t\t<div className=\"w-full flex justify-center items-center gap-2 text-sm mt-5\">\n\t\t\t<p className=\"text-muted-foreground\">Already have an account?</p>\n\t\t\t<a href=\"/sign-in\">Sign in</a>\n\t\t</div>\n\t);\n}\n\nfunction SubmitButton({ isLoading }: { isLoading: boolean }) {\n\treturn (\n\t\t<Button\n\t\t\ttype=\"submit\"\n\t\t\tclassName=\"w-full cursor-pointer\"\n\t\t\tdisabled={isLoading}\n\t\t>\n\t\t\t{isLoading ? <LoaderCircle className=\"animate-spin\" /> : \"Create account\"}\n\t\t</Button>\n\t);\n}\n",
      "type": "registry:block"
    },
    {
      "path": "registry/new-york/name-field/name-field.tsx",
      "content": "import {\n\tFormControl,\n\tFormField,\n\tFormItem,\n\tFormLabel,\n\tFormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport type { UseFormReturn } from \"react-hook-form\";\n\nexport function NameField({\n\tform,\n\tisLoading,\n}: {\n\tform: UseFormReturn<any>;\n\tisLoading: boolean;\n}) {\n\treturn (\n\t\t<FormField\n\t\t\tcontrol={form.control}\n\t\t\tname=\"name\"\n\t\t\trender={({ field }) => (\n\t\t\t\t<FormItem>\n\t\t\t\t\t<FormLabel>Name</FormLabel>\n\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tplaceholder=\"Enter your name\"\n\t\t\t\t\t\t\tdisabled={isLoading}\n\t\t\t\t\t\t\t{...field}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</FormControl>\n\t\t\t\t\t<FormMessage />\n\t\t\t\t</FormItem>\n\t\t\t)}\n\t\t/>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/password-field/password-field.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport {\n\tFormControl,\n\tFormField,\n\tFormItem,\n\tFormLabel,\n\tFormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Eye, EyeClosed } from \"lucide-react\";\nimport { useState } from \"react\";\nimport type { UseFormReturn } from \"react-hook-form\";\n\nexport function PasswordField({\n\tform,\n\tisLoading,\n}: {\n\tform: UseFormReturn<any>;\n\tisLoading: boolean;\n}) {\n\tconst [hide, setHide] = useState(true);\n\treturn (\n\t\t<div className=\"relative\">\n\t\t\t<FormField\n\t\t\t\tcontrol={form.control}\n\t\t\t\tname=\"password\"\n\t\t\t\trender={({ field }) => (\n\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t<FormLabel>Password</FormLabel>\n\t\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\ttype={hide ? \"text\" : \"password\"}\n\t\t\t\t\t\t\t\tplaceholder=\"Enter your password\"\n\t\t\t\t\t\t\t\tdisabled={isLoading}\n\t\t\t\t\t\t\t\t{...field}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t<FormMessage />\n\t\t\t\t\t</FormItem>\n\t\t\t\t)}\n\t\t\t/>\n\t\t\t<Button\n\t\t\t\tclassName=\"right-2 absolute top-7 size-6 z-10\"\n\t\t\t\tsize={\"sm\"}\n\t\t\t\tvariant={\"ghost\"}\n\t\t\t\trole=\"button\"\n\t\t\t\ttype=\"button\"\n\t\t\t\tonClick={() => setHide(!hide)}\n\t\t\t>\n\t\t\t\t{hide ? <Eye /> : <EyeClosed />}\n\t\t\t</Button>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/email-field/email-field.tsx",
      "content": "import {\n\tFormControl,\n\tFormField,\n\tFormItem,\n\tFormLabel,\n\tFormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport type { UseFormReturn } from \"react-hook-form\";\n\nexport function EmailField({\n\tform,\n\tisLoading,\n}: {\n\tform: UseFormReturn<any>;\n\tisLoading: boolean;\n}) {\n\treturn (\n\t\t<FormField\n\t\t\tcontrol={form.control}\n\t\t\tname=\"email\"\n\t\t\trender={({ field }) => (\n\t\t\t\t<FormItem>\n\t\t\t\t\t<FormLabel>Email</FormLabel>\n\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\t\tplaceholder=\"Enter your email address\"\n\t\t\t\t\t\t\tdisabled={isLoading}\n\t\t\t\t\t\t\t{...field}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</FormControl>\n\t\t\t\t\t<FormMessage />\n\t\t\t\t</FormItem>\n\t\t\t)}\n\t\t/>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/root-error/root-error.tsx",
      "content": "import type { UseFormReturn } from \"react-hook-form\";\n\nexport function RootError({ form }: { form: UseFormReturn<any> }) {\n\tif (!form.formState.errors.root) return null;\n\treturn (\n\t\t<p className=\"text-destructive-foreground text-sm mb-3\">\n\t\t\t{form.formState.errors.root.message}\n\t\t</p>\n\t);\n}\n",
      "type": "registry:component"
    }
  ]
}