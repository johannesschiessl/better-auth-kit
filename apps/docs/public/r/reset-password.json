{
	"$schema": "https://ui.shadcn.com/schema/registry-item.json",
	"name": "reset-password",
	"type": "registry:component",
	"title": "Reset Password",
	"description": "A reset password component for Better Auth.",
	"registryDependencies": ["form", "input", "button"],
	"files": [
		{
			"path": "registry/new-york/reset-password/reset-password.tsx",
			"content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Form } from \"@/components/ui/form\";\nimport { useCallback, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { authClient } from \"@/lib/auth-client\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { RootError } from \"@/components/root-error\";\nimport type { ErrorContext, SuccessContext } from \"better-auth/react\";\nimport { cn } from \"@/lib/utils\";\nimport { toast } from \"sonner\";\nimport { LoaderCircle } from \"lucide-react\";\nimport { PasswordField } from \"@/components/password-field\";\n\nconst formSchema = z.object({\n\tpassword: z.string().min(6, {\n\t\tmessage: \"Password must be at least 6 characters\",\n\t}),\n});\n\nexport type FormSchema = z.infer<typeof formSchema>;\n\nexport interface ResetPasswordProps {\n\tonSuccess?: (context: SuccessContext) => void;\n\tonError?: (context: ErrorContext) => void;\n\tredirectTo?: string;\n\tclassName?: string;\n}\n\nexport function ResetPassword(props?: ResetPasswordProps) {\n\tconst form = useForm({\n\t\tresolver: zodResolver(formSchema),\n\t\tdefaultValues: {\n\t\t\tpassword: \"\",\n\t\t},\n\t});\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\tconst onSubmit = useCallback(\n\t\t(values: FormSchema) => {\n\t\t\tsetIsLoading(true);\n\t\t\tauthClient.resetPassword(\n\t\t\t\t{\n\t\t\t\t\tnewPassword: values.password,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tonSuccess(context) {\n\t\t\t\t\t\tsetIsLoading(false);\n\t\t\t\t\t\ttoast.success(`Check your email for a reset link!`);\n\t\t\t\t\t\treturn props?.onSuccess?.(context);\n\t\t\t\t\t},\n\t\t\t\t\tonError(context) {\n\t\t\t\t\t\tsetIsLoading(false);\n\t\t\t\t\t\ttoast.error(`There was an issue sending a reset password link.`, {\n\t\t\t\t\t\t\tdescription: <>{context.error.message}</>,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tform.setError(\"root\", { message: context.error.message });\n\t\t\t\t\t\treturn props?.onError?.(context);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t},\n\t\t[props, form.setError],\n\t);\n\n\treturn (\n\t\t<div\n\t\t\tclassName={cn(\n\t\t\t\t\"space-y-8 w-96 border border-border rounded-2xl p-8 shadow-2xl bg-card text-card-foreground\",\n\t\t\t\tprops?.className,\n\t\t\t)}\n\t\t>\n\t\t\t<Form {...form}>\n\t\t\t\t<Title />\n\t\t\t\t<form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n\t\t\t\t\t<PasswordField form={form} isLoading={isLoading} />\n\t\t\t\t\t<RootError form={form} />\n\t\t\t\t\t<SubmitButton isLoading={isLoading} />\n\t\t\t\t</form>\n\t\t\t</Form>\n\t\t</div>\n\t);\n}\n\nfunction Title() {\n\treturn (\n\t\t<div className=\"w-full flex flex-col gap-2 justify-center items-center\">\n\t\t\t<h1 className=\"text-lg font-bold\">Reset your password</h1>\n\t\t\t<p className=\"text-muted-foreground text-xs\">Enter your new password.</p>\n\t\t</div>\n\t);\n}\n\nfunction SubmitButton({ isLoading }: { isLoading: boolean }) {\n\treturn (\n\t\t<Button\n\t\t\ttype=\"submit\"\n\t\t\tclassName=\"w-full cursor-pointer\"\n\t\t\tdisabled={isLoading}\n\t\t>\n\t\t\t{isLoading ? <LoaderCircle className=\"animate-spin\" /> : \"Continue\"}\n\t\t</Button>\n\t);\n}\n",
			"type": "registry:block"
		},
		{
			"path": "registry/new-york/password-field/password-field.tsx",
			"content": "import { Button } from \"@/components/ui/button\";\nimport {\n\tFormControl,\n\tFormField,\n\tFormItem,\n\tFormLabel,\n\tFormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Eye, EyeClosed } from \"lucide-react\";\nimport { useState } from \"react\";\nimport type { UseFormReturn } from \"react-hook-form\";\n\nexport function PasswordField({\n\tform,\n\tisLoading,\n}: {\n\tform: UseFormReturn<any>;\n\tisLoading: boolean;\n}) {\n\tconst [show, setShow] = useState(false);\n\treturn (\n\t\t<div className=\"relative\">\n\t\t\t<FormField\n\t\t\t\tcontrol={form.control}\n\t\t\t\tname=\"password\"\n\t\t\t\trender={({ field }) => (\n\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t<FormLabel>Password</FormLabel>\n\t\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\ttype={show ? \"text\" : \"password\"}\n\t\t\t\t\t\t\t\tplaceholder=\"Enter your password\"\n\t\t\t\t\t\t\t\tdisabled={isLoading}\n\t\t\t\t\t\t\t\t{...field}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t<FormMessage />\n\t\t\t\t\t</FormItem>\n\t\t\t\t)}\n\t\t\t/>\n\t\t\t<Button\n\t\t\t\tclassName=\"right-2 absolute bottom-1.5 size-6 z-10\"\n\t\t\t\tsize={\"sm\"}\n\t\t\t\tvariant={\"ghost\"}\n\t\t\t\trole=\"button\"\n\t\t\t\ttype=\"button\"\n\t\t\t\tonClick={() => setShow(!show)}\n\t\t\t>\n\t\t\t\t{show ? <Eye /> : <EyeClosed />}\n\t\t\t</Button>\n\t\t</div>\n\t);\n}\n",
			"type": "registry:component"
		},
		{
			"path": "registry/new-york/root-error/root-error.tsx",
			"content": "import type { UseFormReturn } from \"react-hook-form\";\n\nexport function RootError({ form }: { form: UseFormReturn<any> }) {\n\tif (!form.formState.errors.root) return null;\n\treturn (\n\t\t<p className=\"text-destructive-foreground text-sm mb-3\">\n\t\t\t{form.formState.errors.root.message}\n\t\t</p>\n\t);\n}\n",
			"type": "registry:component"
		}
	]
}
